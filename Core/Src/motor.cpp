/*
 * motor.c
 *
 *  Created on: May 25, 2019
 *      Author: dango
 */
#include "motor.h"
#include "motion_observer.h"
#include "vector"
arm_pid_instance_f32 trans_pid;
arm_pid_instance_f32 rotate_pid;

void System_Identification(){

}
void set_left_motor_pulse(int16_t left_pulse){
	int16_t max_pulse = htim5.Init.Period - 1;
	TIM_OC_InitTypeDef sConfigOC = { 0 };
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if(left_pulse > 0){
		if(left_pulse >= max_pulse)	left_pulse = max_pulse;
		sConfigOC.Pulse = max_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3);
		sConfigOC.Pulse = max_pulse - left_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4);
	}
	else{
		if(left_pulse <= -max_pulse)	left_pulse = -max_pulse;
		sConfigOC.Pulse = max_pulse + left_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3);
		sConfigOC.Pulse = max_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4);
	}
}
void set_right_motor_pulse(int16_t right_pulse){
	int16_t max_pulse = htim5.Init.Period - 1;
	TIM_OC_InitTypeDef sConfigOC = { 0 };
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if(right_pulse > 0){
		if(right_pulse >= max_pulse)	right_pulse = max_pulse;
		sConfigOC.Pulse = max_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
		sConfigOC.Pulse = max_pulse - right_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2);
	}
	else{
		if(right_pulse <= -max_pulse)	right_pulse = -max_pulse;
		sConfigOC.Pulse = max_pulse + right_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
		sConfigOC.Pulse = max_pulse;
		HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2);
	}
}
void set_motor_pulse(int16_t left_pulse, int16_t right_pulse){
	set_left_motor_pulse(left_pulse);
	set_right_motor_pulse(right_pulse);
	start_motor();
}
void start_motor(){
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
}
void stop_motor(){
  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
	set_motor_pulse(0,0);
}
void estimate_velocity(){
	float alpha = 0.65;
	float last_velocity = 0.0, present_velocity = 0.0;
	float last_sum_accel = 0.0, sum_accel = 0.0;
	float data[] = {
			0.000000, 0.000000, 0.000167, -0.063757,  2.142563
			, 408.038910, 530.450562, 0.071944, -0.214636 ,2.203538
			, 652.862244, 1020.097229, 0.015792, 0.109094 ,3.240124
			, 734.470032, 1183.312744, -0.015947, 0.026086 ,2.813295
			, 1264.920532, 897.685608, -0.289873, 0.321008 ,2.447441
			, 1387.332275, 897.685608, -0.025224, -0.000281 ,4.459636
			, 1020.097229, 1264.920532, 0.088057, 0.011926 ,4.276710
			, 979.293335, 1264.920532, 0.037764, -0.078894 ,-0.662315
			, 1836.175049, 979.293335, 0.280928, 0.009973 ,2.386465
			, 1142.509033, 1020.097229, -0.016435, 0.189661 ,3.545002
			, 897.685608, 1672.959595, -0.121904, -0.056921 ,2.142563
			, 1713.763306, 1060.901123, -0.633134, -0.180945 ,-5.845243
			, 1264.920532, 938.489502, -0.049150, -0.006140 ,0.069392
			, 979.293335, 1468.940063, -0.355791, 0.220911 ,-1.759876
			, 1509.743896, 1264.920532, -0.183916, -0.055945 ,-1.942803
			, 1428.136230, 938.489502, 0.107100, -0.126746 ,-1.942803
			, 1020.097229, 1183.312744, -0.065751, 0.118860 ,1.227929
			, 1387.332275, 1754.567261, -0.361650, -0.126257 ,0.557197
			, 1591.351807, 1020.097229, 0.084151, 0.293665 ,1.045002
			, 1060.901123, 1020.097229, 0.041182, 0.159875 ,1.349880
			, 1305.724487, 1632.155640, 0.047042, 0.103235 ,2.386465
			, 1754.567261, 1142.509033, 0.268721, 0.190149 ,5.130368
			, 1142.509033, 979.293335, 0.040694, -0.211218 ,1.045002
			, 1183.312744, 1305.724487, -0.029619, 0.129114 ,0.801100
			, 1795.371216, 1428.136230, -0.024736, -0.158972 ,0.557197
			, 1101.705078, 1020.097229, -0.137041, 0.144739 ,1.837685
			, 1183.312744, 1142.509033, 0.084151, 0.104700 ,4.337685
			, 1836.175049, 1754.567261, 0.251631, 0.079797 ,6.532807
			, 1183.312744, 1060.901123, -0.121416, 0.078333 ,4.215734
			, 1060.901123, 1020.097229, -0.222490, 0.133020 ,1.045002
			, 1836.175049, 1591.351807, 0.014815, -0.010046 ,1.776709
			, 1183.312744, 1183.312744, 1.041182, 0.079309 ,5.008417
			, 1060.901123, 1020.097229, 0.005538, -0.107703 ,-0.906218
			, 1917.782959, 1346.528442, -0.057939, 0.200891 ,2.447441
			, 1224.116699, 1428.136230, 0.113448, -0.065222 ,6.593782
			, 1183.312744, 1020.097229, -0.111162, -0.060828 ,1.959636
			, 1917.782959, 1101.705078, 0.203780, -0.249792 ,4.032807
			, 1264.920532, 1876.979004, 0.104659, -0.221960 ,6.776710
			, 1101.705078, 1020.097229, -0.376298, 0.338098 ,3.057197
			, 1958.586670, 1020.097229, -0.122392, 0.018762 ,2.752319
			, 1264.920532, 1632.155640, -0.064775, 0.001184 ,1.349880
			, 1183.312744, 1224.116699, -0.196611, 0.500696 ,1.349880
			, 1958.586670, 979.293335, 0.010420, -0.010535 ,5.069392
			, 1224.116699, 1346.528442, 0.132491, -0.041785 ,4.825490
			, 1183.312744, 1509.743896, -0.141435, -0.290808 ,1.105978
			, 1836.175049, 1060.901123, -0.022294, 0.017786 ,5.069392
			, 1183.312744, 1020.097229, 0.016768, -0.008582 ,7.264514
			, 1264.920532, 1713.763306, -0.051103, 0.027063 ,10.496222
			, 1836.175049, 1142.509033, -0.004228, -0.060339 ,5.618173
			, 1183.312744, 979.293335, -0.005205, -0.020300 ,3.910856
			, 1305.724487, 1468.940063, 0.056319, -0.023718 ,4.886465
			, 1836.175049, 1264.920532, -0.969072, 1.459680 ,2.996222
			, 1142.509033, 979.293335, 0.219893, -0.048132 ,4.398661
			, 1305.724487, 1346.528442, 0.140792, -0.028113 ,-0.052559
			, 1713.763306, 1591.351807, -0.196611, 0.305383 ,0.069392
			, 1142.509033, 1060.901123, 0.029463, -0.061804 ,2.691343
			, 1387.332275, 1060.901123, 0.010420, -0.093054 ,2.630368
			, 1713.763306, 1754.567261, 0.063155, -0.163855 ,4.764514
			, 1183.312744, 1060.901123, 0.155928, 0.411829 ,1.471831
			, 1387.332275, 979.293335, 0.130538, -0.009070 ,7.447441
			, 1672.959595, 1509.743896, 0.190596, 0.041711 ,3.179148
			, 1101.705078, 1264.920532, -0.398759, -0.405066 ,3.727929
			, 1468.940063, 938.489502, 0.158858, -0.461707 ,4.398661
			, 1672.959595, 1264.920532, 0.087569, -0.321570 ,7.264514
			, 1101.705078, 1632.155640, 0.177413, -0.237097 ,3.545002
			, 1509.743896, 1020.097229, -0.131181, -0.035437 ,1.349880
			, 1550.547852, 1060.901123, 0.056807, 0.026086 ,5.862075
			, 1142.509033, 1672.959595, -0.104814, 0.254602 ,9.886465
			, 1632.155640, 1101.705078, 0.407393, 0.016809 ,-2.003779
			, 1468.940063, 979.293335, -0.147783, -0.102332 ,0.374270
			, 1060.901123, 1468.940063, -0.247880, 0.287317 ,8.484027
			, 1632.155640, 1346.528442, -0.388017, 0.033411 ,7.081588
			, 1468.940063, 938.489502, -0.035966, 0.364954 ,3.484026
			, 1060.901123, 1142.509033, -0.177568, -0.517859 ,7.508417
			, 1672.959595, 1672.959595, 0.149092, -0.285925 ,1.045002
			, 1428.136230, 1020.097229, 0.113448, 0.041711 ,0.984026
			, 1060.901123, 1101.705078, -0.138017, 0.859094 ,1.227929
			, 1754.567261, 1713.763306, -0.038896, -0.024695 ,0.984026
			, 1346.528442, 1101.705078, 0.059737, -0.174597 ,0.069392
			, 979.293335, 979.293335, -0.197099, 0.347375 ,0.618173
			, 1836.175049, 1509.743896, -0.041826, 0.019250 ,3.788904
			, 1346.528442, 1305.724487, 0.162276, 0.390344 ,8.849880
			, 979.293335, 1020.097229, -0.003251, -0.166296 ,7.081588
			, 1836.175049, 1224.116699, -0.000322, -0.143347 ,7.569392
			, 1346.528442, 1591.351807, 0.028487, -0.098914 ,6.593782
			, 1020.097229, 1060.901123, 0.225752, -0.168738 ,5.130368
			, 1876.979004, 1101.705078, 0.044112, 0.013879 ,2.996222
			, 1305.724487, 1713.763306, -0.080888, -0.197546 ,3.849880
			, 979.293335, 1060.901123, 0.293624, 0.387903 ,4.215734
			, 1917.782959, 979.293335, -0.053056, 0.019250 ,1.227929
			, 1346.528442, 1428.136230, 0.270186, -0.093542 ,4.886465
			, 1020.097229, 1224.116699, -0.215654, 0.015344 ,7.630368
			, 1917.782959, 979.293335, -0.018876, 0.241418 ,4.581587
			, 1305.724487, 1183.312744, 0.035811, -0.013953 ,9.520612
			, 1020.097229, 1713.763306, -0.179033, 0.026086 ,8.971831
			, 2040.194458, 1060.901123, -0.204912, -0.054968 ,5.252319
			, 1264.920532, 1060.901123, 0.092452, -0.147253 ,5.557197
			, 1060.901123, 1713.763306, -0.244951, 0.056360 ,1.837685
			, 2040.194458, 1101.705078, -0.539384, -0.479285 ,-3.101340
			, 1264.920532, 979.293335, -0.060869, -0.044714 ,2.508417
			, 1060.901123, 1468.940063, -0.145341, -0.132605 ,-2.003779
			, 1917.782959, 1305.724487, 0.156417, 0.199915 ,-0.906218
			, 1224.116699, 1020.097229, 0.138350, -0.110144 ,0.618173
			, 1060.901123, 1183.312744, 0.103682, -0.159949 ,-0.113535
			, 1999.390625, 1632.155640, 0.062667, 0.007532 ,1.959636
			, 1224.116699, 1101.705078, -0.108232, -0.380164 ,1.532807
			, 1183.312744, 1020.097229, -0.064287, 0.022668 ,1.837685
			, 2040.194458, 1672.959595, -0.148271, -0.078406 ,3.301100
			, 1224.116699, 1142.509033, -0.228349, -0.358679 ,2.874270
			, 1142.509033, 979.293335, 0.023604, -0.119910 ,1.045002
			, 1917.782959, 1428.136230, -0.104814, -0.311316 ,1.288904
			, 1224.116699, 1346.528442, -0.157060, -0.054968 ,1.349880
			, 1224.116699, 1020.097229, -0.094072, 0.252649 ,3.423051
			, 1876.979004, 1183.312744, -0.256669, 0.414758 ,4.032807
			, 1183.312744, 1713.763306, -0.009599, -0.137488 ,4.215734
			, 1264.920532, 1020.097229, -0.126298, -0.396277 ,-1.333047
			, 1836.175049, 1020.097229, -0.177568, -0.134070 ,3.362075
			, 1183.312744, 1632.155640, 0.135420, -0.140906 ,6.410856
			, 1346.528442, 1142.509033, 0.045088, -0.607214 ,3.605978
			, 1713.763306, 897.685608, -0.115556, -0.119910 ,0.984026
			, 1142.509033, 1468.940063, -0.104814, 0.137415 ,1.349880
			, 1387.332275, 1346.528442, -0.006669, -0.145300 ,4.459636
			, 1672.959595, 979.293335, -0.024248, -0.044714 ,0.740124
			, 1142.509033, 1224.116699, -0.140947, -0.143347 ,2.630368
			, 1550.547852, 1754.567261, -0.074541, 0.010950 ,4.825490
			, 1591.351807, 1060.901123, 0.114913, 0.178918 ,2.203538
			, 1101.705078, 1060.901123, -0.097001, 0.120813 ,4.154758
			, 1550.547852, 1632.155640, 0.156905, -0.316687 ,7.386465
			, 1509.743896, 1142.509033, -0.142412, -0.074988 ,5.191343
			, 1060.901123, 979.293335, -0.001298, -0.022742 ,2.447441
			, 1509.743896, 1468.940063, -0.121416, -0.349402 ,3.118173
			, 1468.940063, 1346.528442, -0.090166, -0.031042 ,2.203538
			, 1060.901123, 979.293335, -0.300615, 0.648157 ,2.630368
			, 1591.351807, 1264.920532, -0.088701, 0.151575 ,0.984026
			, 1468.940063, 1672.959595, -0.035478, -0.124304 ,2.203538
			, 1060.901123, 1060.901123, 0.096846, 0.033899 ,3.545002
			, 1672.959595, 1060.901123, -0.114580, -0.245886 ,0.801100
			, 1468.940063, 1632.155640, -0.084794, 0.063196 ,4.825490
			, 1020.097229, 1142.509033, -0.566728, 0.420129 ,3.727929
			, 1754.567261, 979.293335, -0.138994, -0.098914 ,0.374270
			, 1346.528442, 1346.528442, -0.095048, -0.003699 ,4.093782
			, 979.293335, 1346.528442, 0.029463, -0.026648 ,2.081587
			, 1836.175049, 1020.097229, 0.143721, -0.170691 ,2.752319
			, 1305.724487, 1183.312744, -0.100419, 0.111536 ,3.971831
			, 1020.097229, 1795.371216, 0.108077, 0.251184 ,5.130368
			, 1917.782959, 1020.097229, 0.012374, -0.291785 ,0.862075
			, 1305.724487, 1060.901123, -0.102861, 0.003625 ,0.191343
			, 979.293335, 1550.547852, -0.150712, 0.410364 ,5.557197
			, 1958.586670, 1183.312744, -0.014970, 0.096887 ,1.227929
			, 1305.724487, 979.293335, -0.020830, 0.402551 ,5.557197
			, 1060.901123, 1387.332275, -0.026201, -0.095984 ,5.130368
	};
	for(uint16_t i = 0; i < std::size(data) / 5; i++){
		float enc_velocity = (data[i * 5] + data[i * 5 + 1]) / 2.0f;
		last_sum_accel = sum_accel;
		last_velocity = present_velocity;
		sum_accel += data[i * 5 + 3] * 9.8 * 1000.0 / 100.0;
		present_velocity = last_velocity * alpha + (alpha * sum_accel - alpha * last_sum_accel)
				+ (1 - alpha) * enc_velocity;
		printf("%f, %f\n", enc_velocity, present_velocity);
	}

}
void MotorControl::pidInit(){
	//voltage -> velocity (mm)
	trans_pid.Kp = 0.00259;
	trans_pid.Ki = 0.133 / 1000.0;
	trans_pid.Kd = 0.0;
	//voltage -> rad
	rotate_pid.Kp = 0.281;
	rotate_pid.Ki = 9.56 / 1000.0;
	rotate_pid.Kd = 0.0;
	arm_pid_init_f32(&trans_pid, 1);
	arm_pid_init_f32(&rotate_pid, 1);
}
void MotorControl::pidControlUpdate(const float& v_diff, const float& w_diff){
	const float trans_u = arm_pid_f32(&trans_pid, v_diff) / 4.2 * htim5.Init.Period;
	const float rotate_u = arm_pid_f32(&rotate_pid, w_diff) / 4.2 * htim5.Init.Period;
	const float left_u = trans_u - rotate_u / 2;
	const float right_u = trans_u + rotate_u / 2;
	printf("left u %f, right u %f\n", left_u, right_u);
	set_motor_pulse(left_u, right_u);
}
void MotorControl::pidReset(){
	arm_pid_reset_f32(&trans_pid);
	arm_pid_reset_f32(&rotate_pid);
	stop_motor();
}
#if 0
void motor_task(float32_t left_target_velocity, float32_t right_target_velocity){
	if(robotFlag.encoder == true){
		float32_t left_velocity = TIM4->CNT / 1024 * CIRC_LEN * 1000;
		float32_t rerrorerroright_velocity = TIM3->CNT / 1024 * CIRC_LEN * 1000;
		TIM3->CNT = 0;
		TIM4->CNT = 0;
		float32_t left_error = left_target_velocity - left_velocity;
		float32_t right_error = right_target_velocity - right_velocity;
		float32_t left_input = arm_pid_f32(&left_motor_pid, left_error);
		float32_t right_input = arm_pid_f32(&right_motor_pid, right_error);
		set_motor_pulse(left_input, right_input);
		robotFlag.encoder = false;
	}
}
#endif
